//HW3 by Yichen Liang
//SU Net ID: yliang07  SUID: 455360570
#include <iostream>
#include <list>
#include <map>
#include <string>
using namespace std;

class course {
public:
	string name;
	int section;
	int credits;
	string grade;
	course() {}
	course(string n, int s, int c, string g) { name = n; section = s; credits = c; grade = g; }
	bool operator<(course c) { return (name < c.name); }
	bool operator==(course c) { return (name == c.name); }
};
void add_student(map<int, map<int, list<course*>*>>& DB, int id);
//Do nothing and return if the student is already in DB.


void remove_student(map<int, map<int, list<course*>*>>& DB, int id);
//Do nothing and ruturn if the student is not in DB.

void add_course(map<int, map<int, list<course*>*>>& DB, int semester, int id, course c);
//20171: Spring semester of 2017; 20172: Fall semester of 2017
//All courses in the list should be sorted according to name (ascending order)
//No duplicated courses allowed even if they are in different semesters.

void drop_course(map<int, map<int, list<course*>*>>& DB, int semester, int id, course c);
//Do nothing and return if the student, semester, or course is not in DB.

void print_student_semester_courses(map<int, map<int, list<course*>*>>& DB, int semester, int id);
//Do nothing and return if the student or semester is not in DB.

void print_student_all_courses(map<int, map<int, list<course*>*>>& DB, int id);
//Do nothing and return if the student is not in DB.

ostream& operator<<(ostream& str, const course& c);
ostream& operator<<(ostream& str, map<int,map<int, list<course*>*>>& DB);

int main() {
	map<int, map<int, list<course*>*>> DB;
	add_student(DB, 11111);
	course C1("CIS554", 1, 3, "A-"), C2("CSE674", 1, 3, "B+"), C3("MAT296", 8, 4, "A"), C4("WRT205", 5, 3, "A");

	add_course(DB, 20171, 11111, C1);
	add_course(DB, 20171, 11111, C4);
	add_course(DB, 20171, 11111, C3);
 	add_course(DB, 20171, 11111, C2);
	print_student_semester_courses(DB, 20171, 11111);

	drop_course(DB, 20171, 11111, C1);
	print_student_semester_courses(DB, 20171, 11111); //sorted according to course name

	course C5("CIS351", 2, 3, "A-"), C6("PSY205", 5, 3, "B+"), C7("MAT331", 2, 3, "A"), C8("ECN203", 4, 3, "A");
	add_course(DB, 20172, 11111, C5);
	add_course(DB, 20172, 11111, C6);
	add_course(DB, 20172, 11111, C7);
	add_course(DB, 20172, 11111, C8);
	add_course(DB, 20172, 11111, C3);
	print_student_all_courses(DB, 11111);//ID GPA

	add_student(DB, 11112);
	add_course(DB, 20171, 11112, C2);
	add_course(DB, 20171, 11112, C5);
	add_course(DB, 20171, 11112, C7);
	add_course(DB, 20171, 11112, C4);
	print_student_semester_courses(DB, 20171, 11112);

	add_course(DB, 20172, 11112, C8);
	add_course(DB, 20172, 11112, C3);
	add_course(DB, 20172, 11112, C5);
	add_course(DB, 20172, 11112, C1);
	print_student_semester_courses(DB, 20172, 11112);

	print_student_all_courses(DB, 11112);

	cout << DB << endl;
	remove_student(DB, 11111);
	cout << DB << endl;

	return 0;
}

void add_student(map<int, map<int, list<course*>*>>& DB, int id) {
	if (DB.find(id) != DB.end()) return;
	DB.insert(make_pair(id, map<int, list<course*>*>()));
}

void remove_student(map<int, map<int, list<course*>*>>& DB, int id) {
	if (DB.find(id) == DB.end()) return;
	auto i = DB.find(id);
	DB.erase(i);
}

void add_course(map<int, map<int, list<course*>*>>& DB, int semester, int id, course c) {
	for (auto iterator = DB[id].begin(); iterator != DB[id].end(); iterator++) {
		auto& L1{ *DB[id][iterator->first]};
		for (auto iterator2 = L1.begin(); iterator2 != L1.end(); iterator2++) {
			if (**iterator2 == c) return;
		}
	}//return if find any duplicate course;
	if (DB[id].find(semester)==DB[id].end()) {
		DB[id].insert(make_pair(semester,new(list<course*>)));
	}
	list<course*> &L{ *(DB[id][semester]) };
	if (L.empty()) { 
		L.push_back(new course(c));
		return;
	}
	for (auto i = L.begin(); i != L.end(); i++) {
		if (c<**i||c==**i) {
			L.insert(i, new course(c));
			return;
		}
	}
	L.push_back(new course(c));
}

void drop_course(map<int, map<int, list<course*>*>>& DB, int semester, int id, course c) {
	if (DB.find(id) == DB.end()) return;
	else if (DB[id].find(semester) == DB[id].end()) return;
	else { auto& L2{ *DB[id][semester] }; 
	auto iterator3 = L2.begin();
	for (; iterator3 != L2.end(); iterator3++) {
		if (**iterator3 == c) break;
	}
	if (iterator3 == L2.end()) return;
	//start to drop the course
	L2.erase(iterator3);
	}

}

void print_student_semester_courses(map<int, map<int, list<course*>*>>& DB, int semester, int id) {
	if (DB.find(id) == DB.end()) return;
	else if (DB[id].find(semester) == DB[id].end()) return;
	cout << "Student ID:" << id << endl;
	cout << "Semester:" << semester << endl;
	auto& L4{ *DB[id][semester] };
	for (auto iterator4 = L4.begin(); iterator4 != L4.end(); iterator4++) {
		cout << "(" << (*iterator4)->name << " "  << (*iterator4)->section << " " <<(*iterator4)->credits << " " << (*iterator4)->grade << ")"<<" ";
	}
	cout << endl;
	}

void print_student_all_courses(map<int, map<int, list<course*>*>>& DB, int id) {
	if (DB.find(id) == DB.end()) return;
	cout << "Student ID:" << id ;
	for (auto iterator5 = DB[id].begin(); iterator5 != DB[id].end(); iterator5++) {
		cout << endl;
		cout << "Semester:" << iterator5->first << endl;
		auto& L4{ *DB[id][iterator5->first] };
		for (auto iterator4 = L4.begin(); iterator4 != L4.end(); iterator4++) {
			cout << "(" << (*iterator4)->name<< " " << (*iterator4)->section <<" " << (*iterator4)->credits <<" " << (*iterator4)->grade << ")"<<" ";
		}
	}
	cout << endl;
}

ostream& operator<<(ostream& str, map<int,map<int, list<course*>*>>& DB) {
	for (auto iterator6 = DB.begin(); iterator6 != DB.end(); iterator6++) {
		str << endl;
		str << "Student ID:" << iterator6->first;
		auto Temp = DB[iterator6->first];
		for (auto iterator5 = Temp.begin(); iterator5 != Temp.end(); iterator5++) {
			str << endl;
			str << "Semester:" << iterator5->first << endl;
			auto& L4{ *Temp[iterator5->first] };
			for (auto iterator4 = L4.begin(); iterator4 != L4.end(); iterator4++) {
				str << "(" << (*iterator4)->name << " " << (*iterator4)->section << " " << (*iterator4)->credits << " " <<  (*iterator4)->grade << ")"<<" ";
				
			}
		}
	}
	str << endl;
	return str;
}

ostream& operator<<(ostream& str, const course& c) {
	str << "(" << c.name << " " << c.section << " " << c.credits << " " << c.grade << ")" << " ";
	return str;
}