//HW7 by Yichen Liang
//SU Net ID: yliang07  SUID: 455360570
#include <iostream>
#include <map>
#include <list>
#include <vector>
#include <set>
#include <unordered_set>
#include <unordered_map>
using namespace std;
//For all comparisons, compare the sums of all int objects in the key parts of structures.
//For all hashing, use h(sum of all int objects in the key parts of structures), where hash<int> h;
struct myCompareClass {
	bool operator()(const int *k1,const int *k2)const {
		return *k1 < *k2;
	}
};
struct myFunctorClass {
	unsigned int operator()(const map < list<set<int*, myCompareClass>*>, vector<int*>* >&m1)const {
		int sum = 0;
		for (auto& i : m1) {
			for (auto& i2 : i.first) {
				for (auto& i3 : *i2) {
					sum += *i3;
				}
			}
			for (auto& i4 : *(i.second)) {
				sum += *i4;
			}
		}
		return hash<int>{}(sum);
	}
	bool operator()(const map < list<set<int*, myCompareClass>*>, vector<int*>* >& m1, const map < list<set<int*, myCompareClass>*>, vector<int*>* >& m2) const{
		int sum1 = 0;
		for (auto& i : m1) {
			for (auto& i2 : i.first) {
				for (auto& i3 : *i2) {
					sum1 += *i3;
				}
			}
			for (auto& i4 : *(i.second)) {
				sum1 += *i4;
			}
		}

		int sum2 = 0;
		for (auto& i : m2) {
			for (auto& i2 : i.first) {
				for (auto& i3 : *i2) {
					sum2 += *i3;
				}
			}
			for (auto& i4 : *(i.second)) {
				sum2 += *i4;
			}
		}
		return sum1 == sum2 && m1.size() == m2.size();
	}
};
ostream& operator<<(ostream& str, const unordered_map< map < list<set<int*, myCompareClass>*>, vector<int*>* >, vector<int>, myFunctorClass, myFunctorClass> &M) {
	str << "{" << endl;
	for (auto& i : M) {
		str << "{" ;
		for (auto& i2 : i.first) {
			str << " [ ";
			for (auto& i3 : i2.first) {
				str << "< ";
				for (auto& i4 : *i3) {
					str << *i4<<" ";
				}
				str << " > ";
			}
			str << "]";
			str << " ( ";
			for (auto& i5 : *(i2.second)) {
				str << *i5<<" ";
			}
			str << ")";
		}
		str << " }" ;
		str << " (  ";
		for (auto& i6 : i.second) {
			str << i6<<" ";
		}
		str << " ) "<<endl;
	}
	str << "}";
	return str;
}
int main() {
	//The following won't run. Fix it.
	//In addition, create your initialized values. For each STL container, at least three elements are required.
	//Overload operator<< to allow "cout << H1 << endl;"
	unordered_map< map < list<set<int*, myCompareClass>*>, vector<int*>* >, vector<int>, myFunctorClass, myFunctorClass> UM{
		{{
		{{new set<int*, myCompareClass> {new int{3},new int{5},new int{7}},new set<int*, myCompareClass>{new int{2},new int{5},new int{8}},new set<int*, myCompareClass>{new int{3},new int{6},new int{11}}},new vector<int*>{new int{7},new int{9},new int{13}}},
		{{new set<int*, myCompareClass> {new int{3},new int{5},new int{17}},new set<int*, myCompareClass>{new int{3},new int{5},new int{8}},new set<int*, myCompareClass>{new int{1},new int{3},new int{6}}},new vector<int*>{new int{4},new int{14},new int{3}}},
		{{new set<int*, myCompareClass> {new int{1},new int{7},new int{3}},new set<int*, myCompareClass>{new int{1},new int{2},new int{15}},new set<int*, myCompareClass>{new int{6},new int{16},new int{20}}},new vector<int*>{new int{5},new int{19},new int{4}}}},{ 7,8,9 }},

		{{
		{{new set<int*, myCompareClass> {new int{9},new int{5},new int{7}},new set<int*, myCompareClass>{new int{2},new int{5},new int{8}},new set<int*, myCompareClass>{new int{3},new int{6},new int{11}}},new vector<int*>{new int{7},new int{9},new int{13}}},
		{{new set<int*, myCompareClass> {new int{2},new int{5},new int{17}},new set<int*, myCompareClass>{new int{3},new int{5},new int{8}},new set<int*, myCompareClass>{new int{1},new int{3},new int{6}}},new vector<int*>{new int{4},new int{14},new int{3}}},
		{{new set<int*, myCompareClass> {new int{6},new int{2},new int{3}},new set<int*, myCompareClass>{new int{1},new int{2},new int{15}},new set<int*, myCompareClass>{new int{6},new int{16},new int{20}}},new vector<int*>{new int{5},new int{19},new int{4}}}},{ 7,8,9 }},


		{{
		{{new set<int*, myCompareClass> {new int{3},new int{5},new int{4}},new set<int*, myCompareClass>{new int{2},new int{5},new int{8}},new set<int*, myCompareClass>{new int{3},new int{6},new int{11}}},new vector<int*>{new int{7},new int{9},new int{13}}},
		{{new set<int*, myCompareClass> {new int{2},new int{15},new int{7}},new set<int*, myCompareClass>{new int{3},new int{4},new int{5}},new set<int*, myCompareClass>{new int{1},new int{3},new int{6}}},new vector<int*>{new int{4},new int{14},new int{3}}},
		{{new set<int*, myCompareClass> {new int{6},new int{2},new int{3}},new set<int*, myCompareClass>{new int{1},new int{2},new int{5}},new set<int*, myCompareClass>{new int{6},new int{16},new int{20}}},new vector<int*>{new int{5},new int{19},new int{4}}}},{ 7,8,9 }}

	
	};
	cout << UM << endl;
	return 0;
}
/*
The following is a possible output.
Depending on the initialization values you select, the output values will be different.
However, do follow the same format for set, map, vector and list.
{
{ [ < 3 5 7 > < 2 5 8 > < 3 6 11 > ] ( 7 19 13 ) [ < 3 5 17 > < 3 5 8 > < 1 3 6 > ] ( 4 14 3 ) [ < 1 7 13 > < 1 2 15 > < 6 16 20 > ]
( 5 19 4 ) } ( 7 8 9 )
{ [ < 3 5 7 > < 2 5 8 > < 3 6 11 > ] ( 7 11 3 ) [ < 3 5 17 > < 3 5 8 > < 1 3 6 > ] ( 4 14 3 ) [ < 3 4 5 > < 2 5 18 > < 2 6 13 > ] ( 5 11
13 ) } ( 1 2 3 )
{ [ < 5 6 13 > < 3 4 5 > < 3 9 11 > ] ( 4 14 3 ) [ < 5 7 13 > < 1 11 15 > < 3 6 8 > ] ( 5 12 3 ) [ < 3 4 13 > < 2 5 12 > < 2 13
16 > ] ( 5 17 2 ) } ( 3 5 7 )
}
*/