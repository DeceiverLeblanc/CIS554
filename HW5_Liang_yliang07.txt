//HW5 by Yichen Liang
//SU Net ID: yliang07  SUID: 455360570
#include <iostream>
#include<memory>
#include<math.h>
using namespace std;

class node {
public:
	int value;
	weak_ptr<node> east;
	shared_ptr<node> l_child;
	shared_ptr<node> r_child;
	node() {}
	node(int i) { value = i; }
};

class tree {
public:
	shared_ptr<node> root;
	tree() { }

	//Implement all member functions below
	tree(int n, int m);//constructor for n-level tree with random values in 0 ... m-1
	//n=1: 1 node; n=2: 3 nodes; n=3: 7 nodes; n=4: 15 nodes, etc.

	tree(const tree& T);//copy constructor
	~tree();//destructor
	tree(tree&& T); //move constructor

	tree(const initializer_list<int>& V);//See lecture video recording for this.
	void operator = (const tree& T);//copy assignment
	void operator = (tree&& T); //move assignment
	tree ThreeTimes(); //return a tree with all node value being three times

	shared_ptr<node> operator[](int k);//The function returns the address of kth node
	////in the overall ring (or cycle).  For example, when k is 0, it returns the address of the
	////root; when k is 1, it returns the address of left child of root; when k is 2, it returns
	////the address of right child of root, etc.
	////For a level 4 tree, when k=14, it returns the address of the very last node of the tree.
	friend ostream& operator<<(ostream& str, const tree& T);//print in the order ring/cycle atarting at the root node
	void InorderPrint(shared_ptr<node>);//in-order printing
};
tree::tree(int n, int m) {
	int count = pow(2,n)-1;
	shared_ptr<node> head = root;
	for (int i = 0; i < count; i++) {
		shared_ptr<node> temp = make_shared<node>(rand()%m);
		if (!root)
		{
			root = temp;
			head = root;
		}
		else {
			head->l_child = temp;
			head->east = temp;
			head = head->l_child;
		}
	}
	head->east = root;//link finished
	int index =1;
	shared_ptr<node> current_node = root;
	shared_ptr<node> temp_node ;
	while (index <= count/2) {
		temp_node = current_node;
		int left = 2 * index;
		int right = 2 * index + 1;
		int current = index;
		while (current < left) {
			temp_node = temp_node->east.lock();
			current++;
		}
		current_node->l_child = temp_node;//link the left child;
		current = index;
		temp_node = current_node;
		while (current < right) {
			temp_node = temp_node->east.lock();
			current++;
		}
		current_node->r_child = temp_node;
		index++;
		current_node = current_node->east.lock();
	}
	while (current_node != root) {
		current_node->l_child.reset();
		current_node->r_child.reset();
		current_node = current_node->east.lock();
	}

	cout << "Constructor" << endl;
}
tree::tree(const tree& T) {
	shared_ptr<node> T_head = T.root;
	shared_ptr<node> head = root;
	int count = 0;
	do {
		shared_ptr<node> temp = make_shared<node>(T_head->value);
		if (!root) {
			root = temp;
			head = root;
		}
		else {
			head->l_child = temp;
			head->east = temp;
			head = head->l_child;
		}
		T_head = T_head->east.lock();
		count++;
	} while (T_head!= T.root);
	head->east = root;//link finished

//start to connect the left and right child_node;
	int index = 1;
	shared_ptr<node> current_node = root;
	shared_ptr<node> temp_node;
	while (index <= count / 2) {
		temp_node = current_node;
		int left = 2 * index;
		int right = 2 * index + 1;
		int current = index;
		while (current < left) {
			temp_node = temp_node->east.lock();
			current++;
		}
		current_node->l_child = temp_node;//link the left child;
		current = index;
		temp_node = current_node;
		while (current < right) {
			temp_node = temp_node->east.lock();
			current++;
		}
		current_node->r_child = temp_node;
		index++;
		current_node = current_node->east.lock();
	}
	while (current_node != root) {
		current_node->l_child.reset();
		current_node->r_child.reset();
		current_node = current_node->east.lock();
	}
	cout << "Copy Constructor" << endl;
}
tree::~tree() {
	root.reset();
	cout << "Destructor" << endl;
}
tree::tree(tree&& T) {
	root = T.root;
	T.root.reset();
	cout << "Move Constructor" << endl;
}
tree::tree(const initializer_list<int>& V) {
	shared_ptr<node> head = root;
	int count = 0;
	for (auto& i : V) {
		shared_ptr<node> temp = make_shared<node>(i);
		if (!root) {
			root = temp;
			head = root;
		}
		else {
			head->l_child = temp;
			head->east = temp;
			head = head->l_child;
		}
		count++;
	}
	head->east = root;//link finished


	//start to connect the left and right child_node;
	int index = 1;
	shared_ptr<node> current_node = root;
	shared_ptr<node> temp_node;
	while (index <= count / 2) {
		temp_node = current_node;
		int left = 2 * index;
		int right = 2 * index + 1;
		int current = index;
		while (current < left) {
			temp_node = temp_node->east.lock();
			current++;
		}
		current_node->l_child = temp_node;//link the left child;
		current = index;
		temp_node = current_node;
		while (current < right) {
			temp_node = temp_node->east.lock();
			current++;
		}
		current_node->r_child = temp_node;
		index++;
		current_node = current_node->east.lock();
	}
	while (current_node != root) {
		current_node->l_child.reset();
		current_node->r_child.reset();
		current_node = current_node->east.lock();
	}
	cout << "Initializer List" << endl;
}

shared_ptr<node> tree::operator[](int k) {
	shared_ptr<node> current = root;
	int count = 0;
	while (count < k) {
		current = current->east.lock();
	}
	return current;
}
void tree::operator = (const tree& T) {
	if (this == &T) { cout << "Copy Assignment" << endl; return; }
	root.reset();
	shared_ptr<node> T_head = T.root;
	shared_ptr<node> head = root;
	int count = 0;
	do {
		shared_ptr<node> temp = make_shared<node>(T_head->value);
		if (!root) {
			root = temp;
			head = root;
		}
		else {
			head->l_child = temp;
			head->east = temp;
			head = head->l_child;
		}
		T_head = T_head->east.lock();
		count++;
	} while (T_head != T.root);
	head->east = root;//link finished

//start to connect the left and right child_node;
	int index = 1;
	shared_ptr<node> current_node = root;
	shared_ptr<node> temp_node;
	while (index <= count / 2) {
		temp_node = current_node;
		int left = 2 * index;
		int right = 2 * index + 1;
		int current = index;
		while (current < left) {
			temp_node = temp_node->east.lock();
			current++;
		}
		current_node->l_child = temp_node;//link the left child;
		current = index;
		temp_node = current_node;
		while (current < right) {
			temp_node = temp_node->east.lock();
			current++;
		}
		current_node->r_child = temp_node;
		index++;
		current_node = current_node->east.lock();
	}
	while (current_node != root) {
		current_node->l_child.reset();
		current_node->r_child.reset();
		current_node = current_node->east.lock();
	}
	cout << "Copy Assignment" << endl;
}
void tree::operator = (tree&& T) {
	root.reset();
	root = T.root;
	T.root.reset();
	cout << "Move Assignment" << endl;
}
tree tree::ThreeTimes() {
	tree temp = *this;
	shared_ptr<node> T_head = temp.root;
	do {
		T_head->value *= 3;
		T_head = T_head->east.lock();
	} while (T_head != temp.root);

	cout << "ThreeTimes" << endl;
	return temp;

}
void tree::InorderPrint(shared_ptr<node> p) {
	if (!p) return;
	InorderPrint(p->l_child);
	cout  << p->value << " ";
	InorderPrint(p->r_child);
}
ostream& operator<<(ostream& str, const tree& T);
int main() {
	tree T1(3, 10);
	cout << T1 << endl;
	T1.InorderPrint(T1.root);
	cout << endl;
	tree T2 = { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 };

	cout << T2 << endl;
	T2.InorderPrint(T2.root);
	cout << endl;

	tree T3{ T2 };
	cout << T3 << endl;
	T3.InorderPrint(T3.root);
	cout << endl;
	tree T4;
	T4 = T3;
	cout << T4 << endl;
	T4.InorderPrint(T4.root);
	cout << endl;

	T4 = T3.ThreeTimes();
	cout << T4 << endl;
	T4.InorderPrint(T4.root);
	cout << endl;
	return 0;
}
ostream& operator<<(ostream& str, const tree& T) {
	shared_ptr <node> current = T.root;
	do {
		str << current->value << " ";
		current = current->east.lock();
	} while (current != T.root);
	return str;
}